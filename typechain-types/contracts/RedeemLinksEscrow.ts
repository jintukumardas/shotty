/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RedeemLinksEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelLink"
      | "createRedeemLink"
      | "getBalance"
      | "getLinkDetails"
      | "isLinkValid"
      | "redeemLinks"
      | "redeemTokens"
      | "redeemTokensTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LinkCanceled" | "LinkCreated" | "LinkRedeemed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelLink",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createRedeemLink",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLinkValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLinks",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemTokens",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemTokensTo",
    values: [BytesLike, string, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "cancelLink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRedeemLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLinkDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLinkValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLinks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemTokensTo",
    data: BytesLike
  ): Result;
}

export namespace LinkCanceledEvent {
  export type InputTuple = [
    linkId: BytesLike,
    creator: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [linkId: string, creator: string, amount: bigint];
  export interface OutputObject {
    linkId: string;
    creator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LinkCreatedEvent {
  export type InputTuple = [
    linkId: BytesLike,
    creator: AddressLike,
    amount: BigNumberish,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    linkId: string,
    creator: string,
    amount: bigint,
    expiresAt: bigint
  ];
  export interface OutputObject {
    linkId: string;
    creator: string;
    amount: bigint;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LinkRedeemedEvent {
  export type InputTuple = [
    linkId: BytesLike,
    redeemer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [linkId: string, redeemer: string, amount: bigint];
  export interface OutputObject {
    linkId: string;
    redeemer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RedeemLinksEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): RedeemLinksEscrow;
  waitForDeployment(): Promise<this>;

  interface: RedeemLinksEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelLink: TypedContractMethod<[linkId: BytesLike], [void], "nonpayable">;

  createRedeemLink: TypedContractMethod<
    [linkHash: BytesLike, expiresIn: BigNumberish],
    [string],
    "payable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getLinkDetails: TypedContractMethod<
    [linkId: BytesLike],
    [
      [string, bigint, boolean, bigint, bigint] & {
        creator: string;
        amount: bigint;
        redeemed: boolean;
        createdAt: bigint;
        expiresAt: bigint;
      }
    ],
    "view"
  >;

  isLinkValid: TypedContractMethod<[linkId: BytesLike], [boolean], "view">;

  redeemLinks: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, boolean, bigint, bigint, string] & {
        creator: string;
        amount: bigint;
        redeemed: boolean;
        createdAt: bigint;
        expiresAt: bigint;
        secretHash: string;
      }
    ],
    "view"
  >;

  redeemTokens: TypedContractMethod<
    [linkId: BytesLike, secret: string],
    [void],
    "nonpayable"
  >;

  redeemTokensTo: TypedContractMethod<
    [linkId: BytesLike, secret: string, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelLink"
  ): TypedContractMethod<[linkId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRedeemLink"
  ): TypedContractMethod<
    [linkHash: BytesLike, expiresIn: BigNumberish],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLinkDetails"
  ): TypedContractMethod<
    [linkId: BytesLike],
    [
      [string, bigint, boolean, bigint, bigint] & {
        creator: string;
        amount: bigint;
        redeemed: boolean;
        createdAt: bigint;
        expiresAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLinkValid"
  ): TypedContractMethod<[linkId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "redeemLinks"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, boolean, bigint, bigint, string] & {
        creator: string;
        amount: bigint;
        redeemed: boolean;
        createdAt: bigint;
        expiresAt: bigint;
        secretHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "redeemTokens"
  ): TypedContractMethod<
    [linkId: BytesLike, secret: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemTokensTo"
  ): TypedContractMethod<
    [linkId: BytesLike, secret: string, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LinkCanceled"
  ): TypedContractEvent<
    LinkCanceledEvent.InputTuple,
    LinkCanceledEvent.OutputTuple,
    LinkCanceledEvent.OutputObject
  >;
  getEvent(
    key: "LinkCreated"
  ): TypedContractEvent<
    LinkCreatedEvent.InputTuple,
    LinkCreatedEvent.OutputTuple,
    LinkCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LinkRedeemed"
  ): TypedContractEvent<
    LinkRedeemedEvent.InputTuple,
    LinkRedeemedEvent.OutputTuple,
    LinkRedeemedEvent.OutputObject
  >;

  filters: {
    "LinkCanceled(bytes32,address,uint256)": TypedContractEvent<
      LinkCanceledEvent.InputTuple,
      LinkCanceledEvent.OutputTuple,
      LinkCanceledEvent.OutputObject
    >;
    LinkCanceled: TypedContractEvent<
      LinkCanceledEvent.InputTuple,
      LinkCanceledEvent.OutputTuple,
      LinkCanceledEvent.OutputObject
    >;

    "LinkCreated(bytes32,address,uint256,uint256)": TypedContractEvent<
      LinkCreatedEvent.InputTuple,
      LinkCreatedEvent.OutputTuple,
      LinkCreatedEvent.OutputObject
    >;
    LinkCreated: TypedContractEvent<
      LinkCreatedEvent.InputTuple,
      LinkCreatedEvent.OutputTuple,
      LinkCreatedEvent.OutputObject
    >;

    "LinkRedeemed(bytes32,address,uint256)": TypedContractEvent<
      LinkRedeemedEvent.InputTuple,
      LinkRedeemedEvent.OutputTuple,
      LinkRedeemedEvent.OutputObject
    >;
    LinkRedeemed: TypedContractEvent<
      LinkRedeemedEvent.InputTuple,
      LinkRedeemedEvent.OutputTuple,
      LinkRedeemedEvent.OutputObject
    >;
  };
}
