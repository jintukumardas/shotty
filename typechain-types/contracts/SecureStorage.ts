/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SecureStorage {
  export type DocumentStruct = {
    secretId: string;
    ipfsHash: string;
    encryptedMetadata: string;
    fileName: string;
    fileSize: BigNumberish;
    uploadedAt: BigNumberish;
    active: boolean;
  };

  export type DocumentStructOutput = [
    secretId: string,
    ipfsHash: string,
    encryptedMetadata: string,
    fileName: string,
    fileSize: bigint,
    uploadedAt: bigint,
    active: boolean
  ] & {
    secretId: string;
    ipfsHash: string;
    encryptedMetadata: string;
    fileName: string;
    fileSize: bigint;
    uploadedAt: bigint;
    active: boolean;
  };
}

export interface SecureStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deleteDocument"
      | "documentExists"
      | "getAllDocuments"
      | "getDocument"
      | "getDocumentCount"
      | "searchDocuments"
      | "updateDocument"
      | "uploadDocument"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DocumentDeleted"
      | "DocumentRetrieved"
      | "DocumentUpdated"
      | "DocumentUploaded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deleteDocument",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "documentExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDocuments",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getDocument", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDocumentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "searchDocuments",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDocument",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadDocument",
    values: [string, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deleteDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "documentExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uploadDocument",
    data: BytesLike
  ): Result;
}

export namespace DocumentDeletedEvent {
  export type InputTuple = [user: AddressLike, secretId: string];
  export type OutputTuple = [user: string, secretId: string];
  export interface OutputObject {
    user: string;
    secretId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentRetrievedEvent {
  export type InputTuple = [user: AddressLike, secretId: string];
  export type OutputTuple = [user: string, secretId: string];
  export interface OutputObject {
    user: string;
    secretId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    secretId: string,
    newIpfsHash: string
  ];
  export type OutputTuple = [
    user: string,
    secretId: string,
    newIpfsHash: string
  ];
  export interface OutputObject {
    user: string;
    secretId: string;
    newIpfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentUploadedEvent {
  export type InputTuple = [
    user: AddressLike,
    secretId: string,
    ipfsHash: string,
    fileName: string,
    fileSize: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    secretId: string,
    ipfsHash: string,
    fileName: string,
    fileSize: bigint
  ];
  export interface OutputObject {
    user: string;
    secretId: string;
    ipfsHash: string;
    fileName: string;
    fileSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecureStorage extends BaseContract {
  connect(runner?: ContractRunner | null): SecureStorage;
  waitForDeployment(): Promise<this>;

  interface: SecureStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deleteDocument: TypedContractMethod<[secretId: string], [void], "nonpayable">;

  documentExists: TypedContractMethod<[secretId: string], [boolean], "view">;

  getAllDocuments: TypedContractMethod<
    [],
    [SecureStorage.DocumentStructOutput[]],
    "view"
  >;

  getDocument: TypedContractMethod<
    [secretId: string],
    [SecureStorage.DocumentStructOutput],
    "nonpayable"
  >;

  getDocumentCount: TypedContractMethod<[], [bigint], "view">;

  searchDocuments: TypedContractMethod<
    [query: string],
    [SecureStorage.DocumentStructOutput[]],
    "view"
  >;

  updateDocument: TypedContractMethod<
    [
      secretId: string,
      newIpfsHash: string,
      encryptedMetadata: string,
      fileName: string,
      fileSize: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  uploadDocument: TypedContractMethod<
    [
      secretId: string,
      ipfsHash: string,
      encryptedMetadata: string,
      fileName: string,
      fileSize: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deleteDocument"
  ): TypedContractMethod<[secretId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "documentExists"
  ): TypedContractMethod<[secretId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllDocuments"
  ): TypedContractMethod<[], [SecureStorage.DocumentStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getDocument"
  ): TypedContractMethod<
    [secretId: string],
    [SecureStorage.DocumentStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDocumentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "searchDocuments"
  ): TypedContractMethod<
    [query: string],
    [SecureStorage.DocumentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateDocument"
  ): TypedContractMethod<
    [
      secretId: string,
      newIpfsHash: string,
      encryptedMetadata: string,
      fileName: string,
      fileSize: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uploadDocument"
  ): TypedContractMethod<
    [
      secretId: string,
      ipfsHash: string,
      encryptedMetadata: string,
      fileName: string,
      fileSize: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DocumentDeleted"
  ): TypedContractEvent<
    DocumentDeletedEvent.InputTuple,
    DocumentDeletedEvent.OutputTuple,
    DocumentDeletedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentRetrieved"
  ): TypedContractEvent<
    DocumentRetrievedEvent.InputTuple,
    DocumentRetrievedEvent.OutputTuple,
    DocumentRetrievedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentUpdated"
  ): TypedContractEvent<
    DocumentUpdatedEvent.InputTuple,
    DocumentUpdatedEvent.OutputTuple,
    DocumentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentUploaded"
  ): TypedContractEvent<
    DocumentUploadedEvent.InputTuple,
    DocumentUploadedEvent.OutputTuple,
    DocumentUploadedEvent.OutputObject
  >;

  filters: {
    "DocumentDeleted(address,string)": TypedContractEvent<
      DocumentDeletedEvent.InputTuple,
      DocumentDeletedEvent.OutputTuple,
      DocumentDeletedEvent.OutputObject
    >;
    DocumentDeleted: TypedContractEvent<
      DocumentDeletedEvent.InputTuple,
      DocumentDeletedEvent.OutputTuple,
      DocumentDeletedEvent.OutputObject
    >;

    "DocumentRetrieved(address,string)": TypedContractEvent<
      DocumentRetrievedEvent.InputTuple,
      DocumentRetrievedEvent.OutputTuple,
      DocumentRetrievedEvent.OutputObject
    >;
    DocumentRetrieved: TypedContractEvent<
      DocumentRetrievedEvent.InputTuple,
      DocumentRetrievedEvent.OutputTuple,
      DocumentRetrievedEvent.OutputObject
    >;

    "DocumentUpdated(address,string,string)": TypedContractEvent<
      DocumentUpdatedEvent.InputTuple,
      DocumentUpdatedEvent.OutputTuple,
      DocumentUpdatedEvent.OutputObject
    >;
    DocumentUpdated: TypedContractEvent<
      DocumentUpdatedEvent.InputTuple,
      DocumentUpdatedEvent.OutputTuple,
      DocumentUpdatedEvent.OutputObject
    >;

    "DocumentUploaded(address,string,string,string,uint256)": TypedContractEvent<
      DocumentUploadedEvent.InputTuple,
      DocumentUploadedEvent.OutputTuple,
      DocumentUploadedEvent.OutputObject
    >;
    DocumentUploaded: TypedContractEvent<
      DocumentUploadedEvent.InputTuple,
      DocumentUploadedEvent.OutputTuple,
      DocumentUploadedEvent.OutputObject
    >;
  };
}
