/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ERC20TokenFactory {
  export type TokenInfoStruct = {
    tokenAddress: AddressLike;
    creator: AddressLike;
    name: string;
    symbol: string;
    totalSupply: BigNumberish;
    decimals: BigNumberish;
    createdAt: BigNumberish;
  };

  export type TokenInfoStructOutput = [
    tokenAddress: string,
    creator: string,
    name: string,
    symbol: string,
    totalSupply: bigint,
    decimals: bigint,
    createdAt: bigint
  ] & {
    tokenAddress: string;
    creator: string;
    name: string;
    symbol: string;
    totalSupply: bigint;
    decimals: bigint;
    createdAt: bigint;
  };
}

export interface ERC20TokenFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allTokens"
      | "createToken"
      | "creatorTokens"
      | "getAllTokens"
      | "getCreatorTokens"
      | "getCreatorTokensInfo"
      | "getTokenInfo"
      | "getTotalTokensCreated"
      | "tokenInfo"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "allTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorTokensInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokensCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfo",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorTokensInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokensCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    creator: AddressLike,
    name: string,
    symbol: string,
    totalSupply: BigNumberish,
    decimals: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenAddress: string,
    creator: string,
    name: string,
    symbol: string,
    totalSupply: bigint,
    decimals: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenAddress: string;
    creator: string;
    name: string;
    symbol: string;
    totalSupply: bigint;
    decimals: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC20TokenFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ERC20TokenFactory;
  waitForDeployment(): Promise<this>;

  interface: ERC20TokenFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createToken: TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      decimals: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  creatorTokens: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getAllTokens: TypedContractMethod<[], [string[]], "view">;

  getCreatorTokens: TypedContractMethod<
    [creator: AddressLike],
    [string[]],
    "view"
  >;

  getCreatorTokensInfo: TypedContractMethod<
    [creator: AddressLike],
    [ERC20TokenFactory.TokenInfoStructOutput[]],
    "view"
  >;

  getTokenInfo: TypedContractMethod<
    [tokenAddress: AddressLike],
    [ERC20TokenFactory.TokenInfoStructOutput],
    "view"
  >;

  getTotalTokensCreated: TypedContractMethod<[], [bigint], "view">;

  tokenInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        tokenAddress: string;
        creator: string;
        name: string;
        symbol: string;
        totalSupply: bigint;
        decimals: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      initialSupply: BigNumberish,
      decimals: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creatorTokens"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCreatorTokens"
  ): TypedContractMethod<[creator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCreatorTokensInfo"
  ): TypedContractMethod<
    [creator: AddressLike],
    [ERC20TokenFactory.TokenInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenInfo"
  ): TypedContractMethod<
    [tokenAddress: AddressLike],
    [ERC20TokenFactory.TokenInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalTokensCreated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        tokenAddress: string;
        creator: string;
        name: string;
        symbol: string;
        totalSupply: bigint;
        decimals: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;

  filters: {
    "TokenCreated(address,address,string,string,uint256,uint8,uint256)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
  };
}
