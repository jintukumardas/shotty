/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FlowActions {
  export type ActionStruct = {
    actionType: BigNumberish;
    target: AddressLike;
    data: BytesLike;
    value: BigNumberish;
    description: string;
  };

  export type ActionStructOutput = [
    actionType: bigint,
    target: string,
    data: string,
    value: bigint,
    description: string
  ] & {
    actionType: bigint;
    target: string;
    data: string;
    value: bigint;
    description: string;
  };

  export type WorkflowResultStruct = {
    workflowId: BigNumberish;
    success: boolean;
    completedActions: BigNumberish;
    results: BytesLike[];
  };

  export type WorkflowResultStructOutput = [
    workflowId: bigint,
    success: boolean,
    completedActions: bigint,
    results: string[]
  ] & {
    workflowId: bigint;
    success: boolean;
    completedActions: bigint;
    results: string[];
  };
}

export interface FlowActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelWorkflow"
      | "createAndExecuteWorkflow"
      | "createWorkflow"
      | "executeWorkflow"
      | "getUserWorkflows"
      | "getWorkflow"
      | "getWorkflowAction"
      | "isConnectorRegistered"
      | "nextWorkflowId"
      | "owner"
      | "quickSwapAndStake"
      | "registerConnector"
      | "registeredConnectors"
      | "renounceOwnership"
      | "transferOwnership"
      | "userWorkflows"
      | "withdrawETH"
      | "workflows"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActionExecuted"
      | "ConnectorRegistered"
      | "OwnershipTransferred"
      | "WorkflowCancelled"
      | "WorkflowCreated"
      | "WorkflowExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelWorkflow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAndExecuteWorkflow",
    values: [FlowActions.ActionStruct[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createWorkflow",
    values: [FlowActions.ActionStruct[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWorkflow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWorkflows",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkflow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkflowAction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConnectorRegistered",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextWorkflowId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quickSwapAndStake",
    values: [AddressLike, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerConnector",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredConnectors",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userWorkflows",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workflows",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelWorkflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAndExecuteWorkflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWorkflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWorkflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWorkflows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkflowAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConnectorRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextWorkflowId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quickSwapAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredConnectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWorkflows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workflows", data: BytesLike): Result;
}

export namespace ActionExecutedEvent {
  export type InputTuple = [
    workflowId: BigNumberish,
    actionIndex: BigNumberish,
    success: boolean
  ];
  export type OutputTuple = [
    workflowId: bigint,
    actionIndex: bigint,
    success: boolean
  ];
  export interface OutputObject {
    workflowId: bigint;
    actionIndex: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConnectorRegisteredEvent {
  export type InputTuple = [connectorHash: BytesLike, name: string];
  export type OutputTuple = [connectorHash: string, name: string];
  export interface OutputObject {
    connectorHash: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkflowCancelledEvent {
  export type InputTuple = [workflowId: BigNumberish];
  export type OutputTuple = [workflowId: bigint];
  export interface OutputObject {
    workflowId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkflowCreatedEvent {
  export type InputTuple = [
    workflowId: BigNumberish,
    creator: AddressLike,
    name: string
  ];
  export type OutputTuple = [workflowId: bigint, creator: string, name: string];
  export interface OutputObject {
    workflowId: bigint;
    creator: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkflowExecutedEvent {
  export type InputTuple = [
    workflowId: BigNumberish,
    success: boolean,
    actionsCompleted: BigNumberish
  ];
  export type OutputTuple = [
    workflowId: bigint,
    success: boolean,
    actionsCompleted: bigint
  ];
  export interface OutputObject {
    workflowId: bigint;
    success: boolean;
    actionsCompleted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlowActions extends BaseContract {
  connect(runner?: ContractRunner | null): FlowActions;
  waitForDeployment(): Promise<this>;

  interface: FlowActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelWorkflow: TypedContractMethod<
    [workflowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createAndExecuteWorkflow: TypedContractMethod<
    [
      actions: FlowActions.ActionStruct[],
      name: string,
      allowPartialFailure: boolean
    ],
    [FlowActions.WorkflowResultStructOutput],
    "payable"
  >;

  createWorkflow: TypedContractMethod<
    [
      actions: FlowActions.ActionStruct[],
      name: string,
      allowPartialFailure: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  executeWorkflow: TypedContractMethod<
    [workflowId: BigNumberish],
    [FlowActions.WorkflowResultStructOutput],
    "payable"
  >;

  getUserWorkflows: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getWorkflow: TypedContractMethod<
    [workflowId: BigNumberish],
    [
      [bigint, string, bigint, bigint, string] & {
        id: bigint;
        creator: string;
        status: bigint;
        actionsCount: bigint;
        name: string;
      }
    ],
    "view"
  >;

  getWorkflowAction: TypedContractMethod<
    [workflowId: BigNumberish, actionIndex: BigNumberish],
    [FlowActions.ActionStructOutput],
    "view"
  >;

  isConnectorRegistered: TypedContractMethod<
    [connectorName: string, connectorAddress: AddressLike],
    [boolean],
    "view"
  >;

  nextWorkflowId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  quickSwapAndStake: TypedContractMethod<
    [
      swapTarget: AddressLike,
      swapData: BytesLike,
      stakeTarget: AddressLike,
      stakeData: BytesLike
    ],
    [bigint],
    "payable"
  >;

  registerConnector: TypedContractMethod<
    [connectorName: string, connectorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  registeredConnectors: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userWorkflows: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  workflows: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, string, boolean] & {
        id: bigint;
        creator: string;
        status: bigint;
        createdAt: bigint;
        executedAt: bigint;
        name: string;
        allowPartialFailure: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelWorkflow"
  ): TypedContractMethod<[workflowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createAndExecuteWorkflow"
  ): TypedContractMethod<
    [
      actions: FlowActions.ActionStruct[],
      name: string,
      allowPartialFailure: boolean
    ],
    [FlowActions.WorkflowResultStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createWorkflow"
  ): TypedContractMethod<
    [
      actions: FlowActions.ActionStruct[],
      name: string,
      allowPartialFailure: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeWorkflow"
  ): TypedContractMethod<
    [workflowId: BigNumberish],
    [FlowActions.WorkflowResultStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getUserWorkflows"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWorkflow"
  ): TypedContractMethod<
    [workflowId: BigNumberish],
    [
      [bigint, string, bigint, bigint, string] & {
        id: bigint;
        creator: string;
        status: bigint;
        actionsCount: bigint;
        name: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWorkflowAction"
  ): TypedContractMethod<
    [workflowId: BigNumberish, actionIndex: BigNumberish],
    [FlowActions.ActionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isConnectorRegistered"
  ): TypedContractMethod<
    [connectorName: string, connectorAddress: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextWorkflowId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quickSwapAndStake"
  ): TypedContractMethod<
    [
      swapTarget: AddressLike,
      swapData: BytesLike,
      stakeTarget: AddressLike,
      stakeData: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerConnector"
  ): TypedContractMethod<
    [connectorName: string, connectorAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredConnectors"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userWorkflows"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "workflows"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, string, boolean] & {
        id: bigint;
        creator: string;
        status: bigint;
        createdAt: bigint;
        executedAt: bigint;
        name: string;
        allowPartialFailure: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ActionExecuted"
  ): TypedContractEvent<
    ActionExecutedEvent.InputTuple,
    ActionExecutedEvent.OutputTuple,
    ActionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ConnectorRegistered"
  ): TypedContractEvent<
    ConnectorRegisteredEvent.InputTuple,
    ConnectorRegisteredEvent.OutputTuple,
    ConnectorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "WorkflowCancelled"
  ): TypedContractEvent<
    WorkflowCancelledEvent.InputTuple,
    WorkflowCancelledEvent.OutputTuple,
    WorkflowCancelledEvent.OutputObject
  >;
  getEvent(
    key: "WorkflowCreated"
  ): TypedContractEvent<
    WorkflowCreatedEvent.InputTuple,
    WorkflowCreatedEvent.OutputTuple,
    WorkflowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "WorkflowExecuted"
  ): TypedContractEvent<
    WorkflowExecutedEvent.InputTuple,
    WorkflowExecutedEvent.OutputTuple,
    WorkflowExecutedEvent.OutputObject
  >;

  filters: {
    "ActionExecuted(uint256,uint256,bool)": TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;
    ActionExecuted: TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;

    "ConnectorRegistered(bytes32,string)": TypedContractEvent<
      ConnectorRegisteredEvent.InputTuple,
      ConnectorRegisteredEvent.OutputTuple,
      ConnectorRegisteredEvent.OutputObject
    >;
    ConnectorRegistered: TypedContractEvent<
      ConnectorRegisteredEvent.InputTuple,
      ConnectorRegisteredEvent.OutputTuple,
      ConnectorRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "WorkflowCancelled(uint256)": TypedContractEvent<
      WorkflowCancelledEvent.InputTuple,
      WorkflowCancelledEvent.OutputTuple,
      WorkflowCancelledEvent.OutputObject
    >;
    WorkflowCancelled: TypedContractEvent<
      WorkflowCancelledEvent.InputTuple,
      WorkflowCancelledEvent.OutputTuple,
      WorkflowCancelledEvent.OutputObject
    >;

    "WorkflowCreated(uint256,address,string)": TypedContractEvent<
      WorkflowCreatedEvent.InputTuple,
      WorkflowCreatedEvent.OutputTuple,
      WorkflowCreatedEvent.OutputObject
    >;
    WorkflowCreated: TypedContractEvent<
      WorkflowCreatedEvent.InputTuple,
      WorkflowCreatedEvent.OutputTuple,
      WorkflowCreatedEvent.OutputObject
    >;

    "WorkflowExecuted(uint256,bool,uint256)": TypedContractEvent<
      WorkflowExecutedEvent.InputTuple,
      WorkflowExecutedEvent.OutputTuple,
      WorkflowExecutedEvent.OutputObject
    >;
    WorkflowExecuted: TypedContractEvent<
      WorkflowExecutedEvent.InputTuple,
      WorkflowExecutedEvent.OutputTuple,
      WorkflowExecutedEvent.OutputObject
    >;
  };
}
