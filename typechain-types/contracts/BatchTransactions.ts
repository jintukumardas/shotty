/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BatchTransactions {
  export type OperationStruct = {
    target: AddressLike;
    value: BigNumberish;
    data: BytesLike;
    allowFailure: boolean;
  };

  export type OperationStructOutput = [
    target: string,
    value: bigint,
    data: string,
    allowFailure: boolean
  ] & { target: string; value: bigint; data: string; allowFailure: boolean };

  export type BatchResultStruct = {
    success: boolean;
    results: BytesLike[];
    failedCount: BigNumberish;
  };

  export type BatchResultStructOutput = [
    success: boolean,
    results: string[],
    failedCount: bigint
  ] & { success: boolean; results: string[]; failedCount: bigint };
}

export interface BatchTransactionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "estimateGas"
      | "executeBatch"
      | "executeBatchSimple"
      | "getUserStats"
      | "owner"
      | "renounceOwnership"
      | "totalBatchesExecuted"
      | "transferOwnership"
      | "userBatchCount"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchExecuted"
      | "OperationFailed"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "estimateGas",
    values: [BatchTransactions.OperationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [BatchTransactions.OperationStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatchSimple",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBatchesExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userBatchCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "estimateGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBatchSimple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBatchesExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBatchCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace BatchExecutedEvent {
  export type InputTuple = [
    executor: AddressLike,
    operationsCount: BigNumberish,
    success: boolean
  ];
  export type OutputTuple = [
    executor: string,
    operationsCount: bigint,
    success: boolean
  ];
  export interface OutputObject {
    executor: string;
    operationsCount: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperationFailedEvent {
  export type InputTuple = [operationIndex: BigNumberish, reason: BytesLike];
  export type OutputTuple = [operationIndex: bigint, reason: string];
  export interface OutputObject {
    operationIndex: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BatchTransactions extends BaseContract {
  connect(runner?: ContractRunner | null): BatchTransactions;
  waitForDeployment(): Promise<this>;

  interface: BatchTransactionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  estimateGas: TypedContractMethod<
    [operations: BatchTransactions.OperationStruct[]],
    [bigint],
    "view"
  >;

  executeBatch: TypedContractMethod<
    [
      operations: BatchTransactions.OperationStruct[],
      requireAllSuccess: boolean
    ],
    [BatchTransactions.BatchResultStructOutput],
    "payable"
  >;

  executeBatchSimple: TypedContractMethod<
    [targets: AddressLike[], values: BigNumberish[], datas: BytesLike[]],
    [boolean],
    "payable"
  >;

  getUserStats: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalBatchesExecuted: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userBatchCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "estimateGas"
  ): TypedContractMethod<
    [operations: BatchTransactions.OperationStruct[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<
    [
      operations: BatchTransactions.OperationStruct[],
      requireAllSuccess: boolean
    ],
    [BatchTransactions.BatchResultStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeBatchSimple"
  ): TypedContractMethod<
    [targets: AddressLike[], values: BigNumberish[], datas: BytesLike[]],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getUserStats"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalBatchesExecuted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userBatchCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BatchExecuted"
  ): TypedContractEvent<
    BatchExecutedEvent.InputTuple,
    BatchExecutedEvent.OutputTuple,
    BatchExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OperationFailed"
  ): TypedContractEvent<
    OperationFailedEvent.InputTuple,
    OperationFailedEvent.OutputTuple,
    OperationFailedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BatchExecuted(address,uint256,bool)": TypedContractEvent<
      BatchExecutedEvent.InputTuple,
      BatchExecutedEvent.OutputTuple,
      BatchExecutedEvent.OutputObject
    >;
    BatchExecuted: TypedContractEvent<
      BatchExecutedEvent.InputTuple,
      BatchExecutedEvent.OutputTuple,
      BatchExecutedEvent.OutputObject
    >;

    "OperationFailed(uint256,bytes)": TypedContractEvent<
      OperationFailedEvent.InputTuple,
      OperationFailedEvent.OutputTuple,
      OperationFailedEvent.OutputObject
    >;
    OperationFailed: TypedContractEvent<
      OperationFailedEvent.InputTuple,
      OperationFailedEvent.OutputTuple,
      OperationFailedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
