/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DomainRegistry {
  export type DomainStruct = {
    name: string;
    owner: AddressLike;
    chainId: BigNumberish;
    resolvedAddress: AddressLike;
    registeredAt: BigNumberish;
    expiresAt: BigNumberish;
    metadata: string;
    active: boolean;
  };

  export type DomainStructOutput = [
    name: string,
    owner: string,
    chainId: bigint,
    resolvedAddress: string,
    registeredAt: bigint,
    expiresAt: bigint,
    metadata: string,
    active: boolean
  ] & {
    name: string;
    owner: string;
    chainId: bigint;
    resolvedAddress: string;
    registeredAt: bigint;
    expiresAt: bigint;
    metadata: string;
    active: boolean;
  };
}

export interface DomainRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchRegisterDomains"
      | "domainExists"
      | "domains"
      | "expirationPeriod"
      | "getDomainDetails"
      | "getDomainHash"
      | "getOwnedDomains"
      | "isDomainAvailable"
      | "owner"
      | "registerDomain"
      | "registrationFee"
      | "renewDomain"
      | "renounceOwnership"
      | "resolveDomain"
      | "setExpirationPeriod"
      | "setRegistrationFee"
      | "transferDomain"
      | "transferOwnership"
      | "updateDomainMetadata"
      | "updateDomainResolution"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DomainMetadataUpdated"
      | "DomainRegistered"
      | "DomainRenewed"
      | "DomainResolved"
      | "DomainTransferred"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchRegisterDomains",
    values: [string[], BigNumberish[], AddressLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "domainExists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "domains", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "expirationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnedDomains",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDomainAvailable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDomain",
    values: [string, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "renewDomain", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDomain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpirationPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDomain",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDomainMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDomainResolution",
    values: [string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "batchRegisterDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expirationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnedDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDomainAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpirationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDomainMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDomainResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace DomainMetadataUpdatedEvent {
  export type InputTuple = [
    domainHash: BytesLike,
    metadata: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    domainHash: string,
    metadata: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    domainHash: string;
    metadata: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainRegisteredEvent {
  export type InputTuple = [
    domainHash: BytesLike,
    domainName: string,
    owner: AddressLike,
    chainId: BigNumberish,
    resolvedAddress: AddressLike,
    expiresAt: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    domainHash: string,
    domainName: string,
    owner: string,
    chainId: bigint,
    resolvedAddress: string,
    expiresAt: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    domainHash: string;
    domainName: string;
    owner: string;
    chainId: bigint;
    resolvedAddress: string;
    expiresAt: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainRenewedEvent {
  export type InputTuple = [
    domainHash: BytesLike,
    newExpiresAt: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    domainHash: string,
    newExpiresAt: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    domainHash: string;
    newExpiresAt: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainResolvedEvent {
  export type InputTuple = [
    domainHash: BytesLike,
    chainId: BigNumberish,
    resolvedAddress: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    domainHash: string,
    chainId: bigint,
    resolvedAddress: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    domainHash: string;
    chainId: bigint;
    resolvedAddress: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainTransferredEvent {
  export type InputTuple = [
    domainHash: BytesLike,
    previousOwner: AddressLike,
    newOwner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    domainHash: string,
    previousOwner: string,
    newOwner: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    domainHash: string;
    previousOwner: string;
    newOwner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DomainRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DomainRegistry;
  waitForDeployment(): Promise<this>;

  interface: DomainRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchRegisterDomains: TypedContractMethod<
    [
      domainNames: string[],
      chainIds: BigNumberish[],
      resolvedAddresses: AddressLike[],
      metadatas: string[]
    ],
    [string[]],
    "payable"
  >;

  domainExists: TypedContractMethod<[domainName: string], [boolean], "view">;

  domains: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string, bigint, bigint, string, boolean] & {
        name: string;
        owner: string;
        chainId: bigint;
        resolvedAddress: string;
        registeredAt: bigint;
        expiresAt: bigint;
        metadata: string;
        active: boolean;
      }
    ],
    "view"
  >;

  expirationPeriod: TypedContractMethod<[], [bigint], "view">;

  getDomainDetails: TypedContractMethod<
    [domainName: string],
    [DomainRegistry.DomainStructOutput],
    "view"
  >;

  getDomainHash: TypedContractMethod<[domainName: string], [string], "view">;

  getOwnedDomains: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  isDomainAvailable: TypedContractMethod<
    [domainName: string],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerDomain: TypedContractMethod<
    [
      domainName: string,
      chainId: BigNumberish,
      resolvedAddress: AddressLike,
      metadata: string
    ],
    [string],
    "payable"
  >;

  registrationFee: TypedContractMethod<[], [bigint], "view">;

  renewDomain: TypedContractMethod<[domainName: string], [void], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDomain: TypedContractMethod<
    [domainName: string],
    [[bigint, string] & { chainId: bigint; resolvedAddress: string }],
    "view"
  >;

  setExpirationPeriod: TypedContractMethod<
    [newPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRegistrationFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferDomain: TypedContractMethod<
    [domainName: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDomainMetadata: TypedContractMethod<
    [domainName: string, metadata: string],
    [void],
    "nonpayable"
  >;

  updateDomainResolution: TypedContractMethod<
    [domainName: string, newChainId: BigNumberish, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchRegisterDomains"
  ): TypedContractMethod<
    [
      domainNames: string[],
      chainIds: BigNumberish[],
      resolvedAddresses: AddressLike[],
      metadatas: string[]
    ],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "domainExists"
  ): TypedContractMethod<[domainName: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "domains"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, string, bigint, bigint, string, boolean] & {
        name: string;
        owner: string;
        chainId: bigint;
        resolvedAddress: string;
        registeredAt: bigint;
        expiresAt: bigint;
        metadata: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "expirationPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDomainDetails"
  ): TypedContractMethod<
    [domainName: string],
    [DomainRegistry.DomainStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDomainHash"
  ): TypedContractMethod<[domainName: string], [string], "view">;
  getFunction(
    nameOrSignature: "getOwnedDomains"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "isDomainAvailable"
  ): TypedContractMethod<[domainName: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerDomain"
  ): TypedContractMethod<
    [
      domainName: string,
      chainId: BigNumberish,
      resolvedAddress: AddressLike,
      metadata: string
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registrationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renewDomain"
  ): TypedContractMethod<[domainName: string], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDomain"
  ): TypedContractMethod<
    [domainName: string],
    [[bigint, string] & { chainId: bigint; resolvedAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setExpirationPeriod"
  ): TypedContractMethod<[newPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRegistrationFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferDomain"
  ): TypedContractMethod<
    [domainName: string, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDomainMetadata"
  ): TypedContractMethod<
    [domainName: string, metadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDomainResolution"
  ): TypedContractMethod<
    [domainName: string, newChainId: BigNumberish, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DomainMetadataUpdated"
  ): TypedContractEvent<
    DomainMetadataUpdatedEvent.InputTuple,
    DomainMetadataUpdatedEvent.OutputTuple,
    DomainMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DomainRegistered"
  ): TypedContractEvent<
    DomainRegisteredEvent.InputTuple,
    DomainRegisteredEvent.OutputTuple,
    DomainRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DomainRenewed"
  ): TypedContractEvent<
    DomainRenewedEvent.InputTuple,
    DomainRenewedEvent.OutputTuple,
    DomainRenewedEvent.OutputObject
  >;
  getEvent(
    key: "DomainResolved"
  ): TypedContractEvent<
    DomainResolvedEvent.InputTuple,
    DomainResolvedEvent.OutputTuple,
    DomainResolvedEvent.OutputObject
  >;
  getEvent(
    key: "DomainTransferred"
  ): TypedContractEvent<
    DomainTransferredEvent.InputTuple,
    DomainTransferredEvent.OutputTuple,
    DomainTransferredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DomainMetadataUpdated(bytes32,string,uint256)": TypedContractEvent<
      DomainMetadataUpdatedEvent.InputTuple,
      DomainMetadataUpdatedEvent.OutputTuple,
      DomainMetadataUpdatedEvent.OutputObject
    >;
    DomainMetadataUpdated: TypedContractEvent<
      DomainMetadataUpdatedEvent.InputTuple,
      DomainMetadataUpdatedEvent.OutputTuple,
      DomainMetadataUpdatedEvent.OutputObject
    >;

    "DomainRegistered(bytes32,string,address,uint256,address,uint256,uint256)": TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;
    DomainRegistered: TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;

    "DomainRenewed(bytes32,uint256,uint256)": TypedContractEvent<
      DomainRenewedEvent.InputTuple,
      DomainRenewedEvent.OutputTuple,
      DomainRenewedEvent.OutputObject
    >;
    DomainRenewed: TypedContractEvent<
      DomainRenewedEvent.InputTuple,
      DomainRenewedEvent.OutputTuple,
      DomainRenewedEvent.OutputObject
    >;

    "DomainResolved(bytes32,uint256,address,uint256)": TypedContractEvent<
      DomainResolvedEvent.InputTuple,
      DomainResolvedEvent.OutputTuple,
      DomainResolvedEvent.OutputObject
    >;
    DomainResolved: TypedContractEvent<
      DomainResolvedEvent.InputTuple,
      DomainResolvedEvent.OutputTuple,
      DomainResolvedEvent.OutputObject
    >;

    "DomainTransferred(bytes32,address,address,uint256)": TypedContractEvent<
      DomainTransferredEvent.InputTuple,
      DomainTransferredEvent.OutputTuple,
      DomainTransferredEvent.OutputObject
    >;
    DomainTransferred: TypedContractEvent<
      DomainTransferredEvent.InputTuple,
      DomainTransferredEvent.OutputTuple,
      DomainTransferredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
