/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ScheduledTransactions {
  export type ScheduledTxStruct = {
    id: BigNumberish;
    creator: AddressLike;
    target: AddressLike;
    value: BigNumberish;
    data: BytesLike;
    executeAfter: BigNumberish;
    executeWindow: BigNumberish;
    status: BigNumberish;
    description: string;
    createdAt: BigNumberish;
    executedAt: BigNumberish;
  };

  export type ScheduledTxStructOutput = [
    id: bigint,
    creator: string,
    target: string,
    value: bigint,
    data: string,
    executeAfter: bigint,
    executeWindow: bigint,
    status: bigint,
    description: string,
    createdAt: bigint,
    executedAt: bigint
  ] & {
    id: bigint;
    creator: string;
    target: string;
    value: bigint;
    data: string;
    executeAfter: bigint;
    executeWindow: bigint;
    status: bigint;
    description: string;
    createdAt: bigint;
    executedAt: bigint;
  };
}

export interface ScheduledTransactionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelScheduledTransaction"
      | "defaultWindow"
      | "executeScheduledTransaction"
      | "getPendingSchedulesCount"
      | "getSchedule"
      | "getUserSchedules"
      | "isReadyToExecute"
      | "maxDelay"
      | "minDelay"
      | "nextScheduleId"
      | "owner"
      | "renounceOwnership"
      | "scheduleTransaction"
      | "scheduleTransfer"
      | "scheduledTransactions"
      | "setMaxDelay"
      | "setMinDelay"
      | "transferOwnership"
      | "userSchedules"
      | "withdrawETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TransactionCancelled"
      | "TransactionExecuted"
      | "TransactionFailed"
      | "TransactionScheduled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelScheduledTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeScheduledTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingSchedulesCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSchedules",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyToExecute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxDelay", values?: undefined): string;
  encodeFunctionData(functionFragment: "minDelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextScheduleId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleTransaction",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleTransfer",
    values: [AddressLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduledTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userSchedules",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelScheduledTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeScheduledTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingSchedulesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReadyToExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextScheduleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduledTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionCancelledEvent {
  export type InputTuple = [scheduleId: BigNumberish];
  export type OutputTuple = [scheduleId: bigint];
  export interface OutputObject {
    scheduleId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutedEvent {
  export type InputTuple = [scheduleId: BigNumberish, success: boolean];
  export type OutputTuple = [scheduleId: bigint, success: boolean];
  export interface OutputObject {
    scheduleId: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionFailedEvent {
  export type InputTuple = [scheduleId: BigNumberish, reason: BytesLike];
  export type OutputTuple = [scheduleId: bigint, reason: string];
  export interface OutputObject {
    scheduleId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionScheduledEvent {
  export type InputTuple = [
    scheduleId: BigNumberish,
    creator: AddressLike,
    target: AddressLike,
    executeAfter: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    scheduleId: bigint,
    creator: string,
    target: string,
    executeAfter: bigint,
    description: string
  ];
  export interface OutputObject {
    scheduleId: bigint;
    creator: string;
    target: string;
    executeAfter: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ScheduledTransactions extends BaseContract {
  connect(runner?: ContractRunner | null): ScheduledTransactions;
  waitForDeployment(): Promise<this>;

  interface: ScheduledTransactionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelScheduledTransaction: TypedContractMethod<
    [scheduleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  defaultWindow: TypedContractMethod<[], [bigint], "view">;

  executeScheduledTransaction: TypedContractMethod<
    [scheduleId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getPendingSchedulesCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getSchedule: TypedContractMethod<
    [scheduleId: BigNumberish],
    [ScheduledTransactions.ScheduledTxStructOutput],
    "view"
  >;

  getUserSchedules: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  isReadyToExecute: TypedContractMethod<
    [scheduleId: BigNumberish],
    [boolean],
    "view"
  >;

  maxDelay: TypedContractMethod<[], [bigint], "view">;

  minDelay: TypedContractMethod<[], [bigint], "view">;

  nextScheduleId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  scheduleTransaction: TypedContractMethod<
    [
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      executeAfter: BigNumberish,
      executeWindow: BigNumberish,
      description: string
    ],
    [bigint],
    "payable"
  >;

  scheduleTransfer: TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      executeAfter: BigNumberish,
      description: string
    ],
    [bigint],
    "payable"
  >;

  scheduledTransactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        target: string;
        value: bigint;
        data: string;
        executeAfter: bigint;
        executeWindow: bigint;
        status: bigint;
        description: string;
        createdAt: bigint;
        executedAt: bigint;
      }
    ],
    "view"
  >;

  setMaxDelay: TypedContractMethod<
    [newMaxDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinDelay: TypedContractMethod<
    [newMinDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userSchedules: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawETH: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelScheduledTransaction"
  ): TypedContractMethod<[scheduleId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "defaultWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeScheduledTransaction"
  ): TypedContractMethod<[scheduleId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getPendingSchedulesCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSchedule"
  ): TypedContractMethod<
    [scheduleId: BigNumberish],
    [ScheduledTransactions.ScheduledTxStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserSchedules"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isReadyToExecute"
  ): TypedContractMethod<[scheduleId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextScheduleId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scheduleTransaction"
  ): TypedContractMethod<
    [
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      executeAfter: BigNumberish,
      executeWindow: BigNumberish,
      description: string
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "scheduleTransfer"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      executeAfter: BigNumberish,
      description: string
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "scheduledTransactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        id: bigint;
        creator: string;
        target: string;
        value: bigint;
        data: string;
        executeAfter: bigint;
        executeWindow: bigint;
        status: bigint;
        description: string;
        createdAt: bigint;
        executedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setMaxDelay"
  ): TypedContractMethod<[newMaxDelay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinDelay"
  ): TypedContractMethod<[newMinDelay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userSchedules"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TransactionCancelled"
  ): TypedContractEvent<
    TransactionCancelledEvent.InputTuple,
    TransactionCancelledEvent.OutputTuple,
    TransactionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecuted"
  ): TypedContractEvent<
    TransactionExecutedEvent.InputTuple,
    TransactionExecutedEvent.OutputTuple,
    TransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionFailed"
  ): TypedContractEvent<
    TransactionFailedEvent.InputTuple,
    TransactionFailedEvent.OutputTuple,
    TransactionFailedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionScheduled"
  ): TypedContractEvent<
    TransactionScheduledEvent.InputTuple,
    TransactionScheduledEvent.OutputTuple,
    TransactionScheduledEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TransactionCancelled(uint256)": TypedContractEvent<
      TransactionCancelledEvent.InputTuple,
      TransactionCancelledEvent.OutputTuple,
      TransactionCancelledEvent.OutputObject
    >;
    TransactionCancelled: TypedContractEvent<
      TransactionCancelledEvent.InputTuple,
      TransactionCancelledEvent.OutputTuple,
      TransactionCancelledEvent.OutputObject
    >;

    "TransactionExecuted(uint256,bool)": TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
    TransactionExecuted: TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;

    "TransactionFailed(uint256,bytes)": TypedContractEvent<
      TransactionFailedEvent.InputTuple,
      TransactionFailedEvent.OutputTuple,
      TransactionFailedEvent.OutputObject
    >;
    TransactionFailed: TypedContractEvent<
      TransactionFailedEvent.InputTuple,
      TransactionFailedEvent.OutputTuple,
      TransactionFailedEvent.OutputObject
    >;

    "TransactionScheduled(uint256,address,address,uint256,string)": TypedContractEvent<
      TransactionScheduledEvent.InputTuple,
      TransactionScheduledEvent.OutputTuple,
      TransactionScheduledEvent.OutputObject
    >;
    TransactionScheduled: TypedContractEvent<
      TransactionScheduledEvent.InputTuple,
      TransactionScheduledEvent.OutputTuple,
      TransactionScheduledEvent.OutputObject
    >;
  };
}
