/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AddressBook {
  export type ContactStruct = {
    name: string;
    wallet: AddressLike;
    notes: string;
    addedAt: BigNumberish;
    active: boolean;
  };

  export type ContactStructOutput = [
    name: string,
    wallet: string,
    notes: string,
    addedAt: bigint,
    active: boolean
  ] & {
    name: string;
    wallet: string;
    notes: string;
    addedAt: bigint;
    active: boolean;
  };
}

export interface AddressBookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addContact"
      | "contactExists"
      | "getAllContacts"
      | "getContact"
      | "getContactCount"
      | "removeContact"
      | "resolveContact"
      | "searchContacts"
      | "updateContact"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ContactAdded" | "ContactRemoved" | "ContactUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addContact",
    values: [string, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contactExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContacts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getContact", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getContactCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeContact",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveContact",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "searchContacts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContact",
    values: [string, AddressLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "addContact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contactExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getContact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContactCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeContact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveContact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContact",
    data: BytesLike
  ): Result;
}

export namespace ContactAddedEvent {
  export type InputTuple = [
    user: AddressLike,
    name: string,
    wallet: AddressLike
  ];
  export type OutputTuple = [user: string, name: string, wallet: string];
  export interface OutputObject {
    user: string;
    name: string;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContactRemovedEvent {
  export type InputTuple = [user: AddressLike, name: string];
  export type OutputTuple = [user: string, name: string];
  export interface OutputObject {
    user: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContactUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    name: string,
    newWallet: AddressLike
  ];
  export type OutputTuple = [user: string, name: string, newWallet: string];
  export interface OutputObject {
    user: string;
    name: string;
    newWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AddressBook extends BaseContract {
  connect(runner?: ContractRunner | null): AddressBook;
  waitForDeployment(): Promise<this>;

  interface: AddressBookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addContact: TypedContractMethod<
    [name: string, wallet: AddressLike, notes: string],
    [void],
    "nonpayable"
  >;

  contactExists: TypedContractMethod<[name: string], [boolean], "view">;

  getAllContacts: TypedContractMethod<
    [],
    [AddressBook.ContactStructOutput[]],
    "view"
  >;

  getContact: TypedContractMethod<
    [name: string],
    [AddressBook.ContactStructOutput],
    "view"
  >;

  getContactCount: TypedContractMethod<[], [bigint], "view">;

  removeContact: TypedContractMethod<[name: string], [void], "nonpayable">;

  resolveContact: TypedContractMethod<[name: string], [string], "view">;

  searchContacts: TypedContractMethod<
    [query: string],
    [AddressBook.ContactStructOutput[]],
    "view"
  >;

  updateContact: TypedContractMethod<
    [name: string, newWallet: AddressLike, notes: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addContact"
  ): TypedContractMethod<
    [name: string, wallet: AddressLike, notes: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contactExists"
  ): TypedContractMethod<[name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllContacts"
  ): TypedContractMethod<[], [AddressBook.ContactStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getContact"
  ): TypedContractMethod<
    [name: string],
    [AddressBook.ContactStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContactCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeContact"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveContact"
  ): TypedContractMethod<[name: string], [string], "view">;
  getFunction(
    nameOrSignature: "searchContacts"
  ): TypedContractMethod<
    [query: string],
    [AddressBook.ContactStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateContact"
  ): TypedContractMethod<
    [name: string, newWallet: AddressLike, notes: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ContactAdded"
  ): TypedContractEvent<
    ContactAddedEvent.InputTuple,
    ContactAddedEvent.OutputTuple,
    ContactAddedEvent.OutputObject
  >;
  getEvent(
    key: "ContactRemoved"
  ): TypedContractEvent<
    ContactRemovedEvent.InputTuple,
    ContactRemovedEvent.OutputTuple,
    ContactRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ContactUpdated"
  ): TypedContractEvent<
    ContactUpdatedEvent.InputTuple,
    ContactUpdatedEvent.OutputTuple,
    ContactUpdatedEvent.OutputObject
  >;

  filters: {
    "ContactAdded(address,string,address)": TypedContractEvent<
      ContactAddedEvent.InputTuple,
      ContactAddedEvent.OutputTuple,
      ContactAddedEvent.OutputObject
    >;
    ContactAdded: TypedContractEvent<
      ContactAddedEvent.InputTuple,
      ContactAddedEvent.OutputTuple,
      ContactAddedEvent.OutputObject
    >;

    "ContactRemoved(address,string)": TypedContractEvent<
      ContactRemovedEvent.InputTuple,
      ContactRemovedEvent.OutputTuple,
      ContactRemovedEvent.OutputObject
    >;
    ContactRemoved: TypedContractEvent<
      ContactRemovedEvent.InputTuple,
      ContactRemovedEvent.OutputTuple,
      ContactRemovedEvent.OutputObject
    >;

    "ContactUpdated(address,string,address)": TypedContractEvent<
      ContactUpdatedEvent.InputTuple,
      ContactUpdatedEvent.OutputTuple,
      ContactUpdatedEvent.OutputObject
    >;
    ContactUpdated: TypedContractEvent<
      ContactUpdatedEvent.InputTuple,
      ContactUpdatedEvent.OutputTuple,
      ContactUpdatedEvent.OutputObject
    >;
  };
}
